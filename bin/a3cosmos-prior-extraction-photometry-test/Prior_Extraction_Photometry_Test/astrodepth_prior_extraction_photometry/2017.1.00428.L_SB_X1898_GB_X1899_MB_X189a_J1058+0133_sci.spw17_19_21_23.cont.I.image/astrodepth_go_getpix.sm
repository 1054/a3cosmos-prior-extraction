read_data 00
    load astroGalfit.sm
    data "prior_x_y.txt" read {_px 1.f _py 2.f}
    set _id = 0,dimen(_px)-1 # this is the catalog index from 0 to dimen(catalog)-1, not catalog object id itself
    set _se = (_px>0 && _py>0)
    if(sum(_se) > 0) {
        set id = _id if(_se) # this is the catalog index from 0 to dimen(catalog)-1, not catalog object id itself
        set px = _px if(_se)
        set py = _py if(_se)
        if(is_file("No_catalog_source_within_image")) {!rm "No_catalog_source_within_image"}
    } else {
        print "No_catalog_source_within_image" 'No catalog source within image.\n' {}
        exit
    }


read_pixscale 00
    if(is_file("image_sci_pixscale.txt")) {
        if(is_vector(pixscale)) {unset pixscale}
        data "image_sci_pixscale.txt" read {pixscale 1}
        if(!is_vector(pixscale)) {!rm "image_sci_pixscale.txt"} # added a check here
    }
    if(!is_file("image_sci_pixscale.txt")) {
        !pixscale "image_sci.fits" > "image_sci_pixscale.txt"
    }
    if(!is_file("image_sci_pixscale.txt")) {
        echo "Error! Failed to get pixscale from the image_sci.fits! Failed to read image_sci_pixscale.txt! Exit!"
        exit
    }
    data "image_sci_pixscale.txt" read {pixscale 1}


read_pixnoise 00
    if(is_file("image_sci_pixnoise.txt")) {
        if(is_vector(pixnoise)) {unset pixnoise}
        data "image_sci_pixnoise.txt" read {pixnoise 1}
        if(!is_vector(pixnoise)) {!rm "image_sci_pixnoise.txt"} # added a check here
    }
    if(!is_file("image_sci_pixnoise.txt")) {
        !CrabPhotImageStatistics "image_sci.fits" > "image_sci_pixstats.txt"
        data "image_sci_pixstats.txt" read {pixstats 7}
        define print_noheader 1
        print "image_sci_pixnoise.txt" '%g\n' {pixstats}
        define print_noheader 0
    }
    if(!is_file("image_sci_pixnoise.txt")) {
        echo "Error! Failed to get pixnoise from the image_sci.fits! Failed to read image_sci_pixnoise.txt! Exit!"
        exit
    }
    data "image_sci_pixnoise.txt" read {pixnoise 1}


calc_beamarea 00
    if(is_vector(beamarea)) {unset beamarea}
    if(is_vector(beam_maj)) {unset beam_maj}
    if(is_vector(beam_min)) {unset beam_min}
    if(is_vector(beam_pa))  {unset beam_pa}
    if(is_file("image_sci_beamarea.txt") && is_file("image_sci_beamsize.txt")) {
        #!mv "image_sci_beamarea.txt" "image_sci_beamarea.txt.backup"
        data "image_sci_beamarea.txt" read {beamarea 1.f}
        data "image_sci_beamsize.txt" read {beam_maj 1.f beam_min 2.f beam_pa 3.f}
        if(!is_vector(beamarea) || !is_vector(beam_maj) || !is_vector(beam_min) || !is_vector(beam_pa)) {
            !rm image_sci_beamarea.* 2>/dev/null
            !rm image_sci_beamarea_sinc.* 2>/dev/null
        } else {
            if(beamarea<=0) {
                !rm image_sci_beamarea.* 2>/dev/null
                !rm image_sci_beamarea_sinc.* 2>/dev/null
            }
        } # added a check here
    }
    if(!is_file("image_sci_beamarea.txt")) {
        if(is_vector(beamarea)) {unset beamarea}
        if(is_file("image_sci.fits")) {
            !gethead "image_sci.fits" "BMAJ" "BMIN" "BPA" > "image_sci_beamsize.tmp"
            if(is_vector(beam_maj)) {unset beam_maj}
            if(is_vector(beam_min)) {unset beam_min}
            if(is_vector(beam_pa))  {unset beam_pa}
            data "image_sci_beamsize.tmp" read {beam_maj 1 beam_min 2 beam_pa 3}
            if(is_vector(beam_maj) && is_vector(beam_min) && is_vector(beam_pa)) {
                set beam_maj = beam_maj * 3600.0 # arcsec
                set beam_min = beam_min * 3600.0 # arcsec
                print "image_sci_beamsize.txt" '%18.10f %18.10f %18.10f\n'{beam_maj beam_min beam_pa}
                set beamarea = pi/(4.0*ln(2)) * (beam_maj * beam_min) # arcsec-square
                set beamarea_sinc = pi * (beam_maj/1.89549 * beam_min/1.89549) # arcsec-square
                set beamarea_circle = pi/4.0 * (beam_maj * beam_min) # arcsec-square
                define print_noheader 1
                print "image_sci_beamarea.txt" '%g\n' {beamarea}
                print "image_sci_beamarea_sinc.txt" '%g\n' {beamarea_sinc}
                print "image_sci_beamarea_circle.txt" '%g\n' {beamarea_circle}
                define print_noheader 0
            } else {
                print 'Warning! Failed to gethead "image_sci.fits" "BMAJ" "BMIN" "BPA"! Try next method to estimate beam_maj, beam_min, beam_pa and beamarea!\n' {}
            }
            !rm "image_sci_beamsize.tmp"
        }
    }
    if(!is_file("image_sci_beamarea.txt")) {
        if(is_vector(beamarea)) {unset beamarea}
        if(is_file("image_psf.fits")) {
            !gethead "image_psf.fits" "BMAJ" "BMIN" "BPA" > "image_psf_beamsize.tmp"
            if(is_vector(beam_maj)) {unset beam_maj}
            if(is_vector(beam_min)) {unset beam_min}
            if(is_vector(beam_pa))  {unset beam_pa}
            data "image_psf_beamsize.tmp" read {beam_maj 1 beam_min 2 beam_pa 3}
            if(is_vector(beam_maj) && is_vector(beam_min) && is_vector(beam_pa)) {
                set beamarea = pi/(4.0*ln(2)) * (beam_maj*3600.0 * beam_min*3600.0) # arcsec-square
                set beamarea_sinc = pi * (beam_maj/1.89549*3600.0 * beam_min/1.89549*3600.0) # arcsec-square
                set beamarea_circle = pi/4.0 * (beam_maj*3600.0 * beam_min*3600.0) # arcsec-square
                print "image_psf_beamsize.txt" '%18.10f %18.10f %18.10f\n'{beam_maj beam_min beam_pa}
                define print_noheader 1
                print "image_psf_beamarea.txt" '%g\n' {beamarea}
                print "image_psf_beamarea_sinc.txt" '%g\n' {beamarea_sinc}
                print "image_psf_beamarea_circle.txt" '%g\n' {beamarea_circle}
                define print_noheader 0
                !cp "image_psf_beamsize.txt" "image_sci_beamarea.txt"
            } else {
                print 'Warning! Failed to gethead "image_psf.fits" "BMAJ" "BMIN" "BPA"! Try next method to estimate beam_maj, beam_min, beam_pa and beamarea!\n' {}
            }
            !rm "image_psf_beamsize.tmp"
        }
    }
    if(!is_file("image_sci_beamarea.txt")) {
        if(is_vector(beamarea)) {unset beamarea}
        if(is_file("image_psf.fits")) {
            # measure at which radius an aperture has half of the total flux in image_psf.fits
            #!CrabPhotImageStatistics image_psf.fits > image_psf.fits.statistics.txt
            #data image_psf.fits.statistics.txt read {image_psf_f_peak 5 image_psf_f_total 6}
            !gethead "image_psf.fits" "NAXIS1" "NAXIS2" > "image_psf.fits.gethead.naxis.txt"
            data "image_psf.fits.gethead.naxis.txt" read {image_psf_naxis1 1 image_psf_naxis2 2}
            !rm "image_psf.fits.gethead.naxis.txt"
            !getpix -n 1 "%.15g" "image_psf.fits" 1-$(image_psf_naxis1) 1-$(image_psf_naxis2) > "image_psf.fits.getpix.all.pixels.txt"
            data "image_psf.fits.getpix.all.pixels.txt" read {image_psf_pixel_values 1}
            !rm "image_psf.fits.getpix.all.pixels.txt"
            vecminmax image_psf_pixel_values image_psf_pixel_min image_psf_pixel_max
            if(!is_vector(pixscale)) {read_pixscale}
            set temp_gaussian_fpix = image_psf_pixel_values if(image_psf_pixel_values>=$image_psf_pixel_max*0.0)
            set temp_gaussian_area = sum(temp_gaussian_fpix)
            set temp_gaussian_peak = $image_psf_pixel_max
            set temp_gaussian_sigma = sqrt(temp_gaussian_area / temp_gaussian_peak / (2*pi) / 2.0) # 2D Gaussian Area = 2*pi*a*(sigma_x**2 + sigma_y**2)
            set temp_gaussian_fwhm = 2*sqrt(2*ln(2)) * temp_gaussian_sigma
            #set beamarea = float(sum(image_psf_pixel_values>=$image_psf_pixel_max*0.5))*pixscale*pixscale # arcsec-square
            set beamarea = pi/(4.0*ln(2)) * temp_gaussian_fwhm**2 # arcsec-square
            set beam_maj = temp_gaussian_fwhm
            set beam_min = temp_gaussian_fwhm
            set beam_pa = 0.0
            print "image_sci_beamsize.txt" '%g %g %g\n' {beam_maj beam_min beam_pa}
            define print_noheader 1
            print "image_sci_beamarea.txt" '%g\n' {beamarea}
            print "image_sci_beamarea.warning.txt" 'Warning! No BMAJ BMIN BPA keywords in image_sci.fits or image_psf.fits, estimating beamarea from image_psf.fits assuming Gaussian area and peak relation.\n' {}
            define print_noheader 0
            !cat "image_sci_beamarea.warning.txt"
            #
            #define print_noheader 1
            #print "image_sci_beamarea.txt" '%g\n' {beamarea}
            #print "image_sci_beamarea.warning.txt" 'Warning! No BMAJ BMIN BPA keywords in image_sci.fits or image_psf.fits, taking half maximum pixel count.\n' {}
            #define print_noheader 0
            #<20170923># set beamarea = 1.0
            #<20170923># define print_noheader 1
            #<20170923># print "image_sci_beamarea.txt" '%g\n' {beamarea}
            #<20170923># print "image_sci_beamarea.warning.txt" 'Warning! No BMAJ BMIN BPA keywords in image_sci.fits or image_psf.fits, setting beamarea to 1.0.\n' {}
            #<20170923># define print_noheader 0
        }
    }
    if(!is_vector(beamarea) || !is_vector(beam_maj) || !is_vector(beam_min) || !is_vector(beam_pa)) {
        print 'Error! Failed to get beamarea, beam_maj, beam_min and beam_pa!!\n' {}
        !sleep 9999999999999999999999999
        exit
    }


calc_buffer_size_limit 00
    #<20170923># determine the buffer size, which should be related to the FWHM of PSF
    if(is_vector(buffer_size_limit)) {unset buffer_size_limit}
    if(is_file("buffer_size_limit.txt")) {
        data "buffer_size_limit.txt" read {buffer_size_limit 1.f}
        if(!is_vector(buffer_size_limit)) {
            !rm "buffer_size_limit."* 2>/dev/null
        } # added a check here
    }
    if(!is_file("buffer_size_limit.txt") && is_file("image_sci_beamarea.txt")) {
        data "image_sci_beamarea.txt" read {temp_beamarea 1.f}
        if(!is_vector(pixscale)) {read_pixscale}
        set buffer_size_limit = 1.0*sqrt(temp_beamarea/(pi/(4.0*ln(2)))) / pixscale # pixel, set as 1.0xFWHM
        define print_noheader 1
        print "buffer_size_limit.txt" '%g\n' {buffer_size_limit}
        if(is_file("image_sci_beamarea.warning.txt")) {
        print "buffer_size_limit.warning.txt" 'The buffer size limit is estimated beamarea that has warning, see \"image_sci_beamarea.warning.txt\"!\n' {}
        }
        define print_noheader 0
    }


calc_fluxconv 00
    if(is_vector(fluxconv)) {unset fluxconv}
    if(is_file("image_sci_fluxconv.txt")) {
        data "image_sci_fluxconv.txt" read {fluxconv 1.f fluxunit 2.s}
        if(!is_vector(fluxconv)) {
            !rm "image_sci_fluxconv."* 2>/dev/null
        } # added a check here
    }
    if(!is_file("image_sci_fluxconv.txt") && is_file("image_sci.fits")) {
        !gethead "image_sci.fits" "BUNIT" > "image_sci_fluxunit.txt"
        if(is_vector(fluxunit)) {unset fluxunit}
        data "image_sci_fluxunit.txt" read {fluxunit 1.s}
        if(!is_vector(fluxunit)) {
            #<20180310># add a check for the TELESCOP
            !gethead "image_sci.fits" "TELESCOP" > "image_sci_telescop.txt"
            if(is_vector(telescop)) {unset telescop}
            data "image_sci_telescop.txt" read {telescop 1.s}
            if(is_vector(telescop)) {
                if(telescop=='ALMA') {
                    set fluxunit = 'Jy/beam'
                    !echo "Jy/beam" > "image_sci_fluxunit.txt"
                }
            }
        }
        if(is_vector(fluxunit)) {
            if(is_file("image_sci_fluxunit.warning.txt")) {!rm "image_sci_fluxunit.warning.txt"}
            if(fluxunit=='Jy/beam' || fluxunit=='JY/BEAM') {
                calc_beamarea
                read_pixscale
                set fluxconv = 1.0 / (beamarea/(pixscale*pixscale)) # assuming Jy/beam
                if(is_file("image_sci_fluxconv.warning.txt")) {!rm "image_sci_fluxconv.warning.txt"}
            } else {
                if(fluxunit=='MJy/sr' || fluxunit=='MJY/SR') {
                    set fluxconv = 1e6 * (pixscale/3600.0/180.0*pi)**2 # assuming MJy/sr
                    if(is_file("image_sci_fluxconv.warning.txt")) {!rm "image_sci_fluxconv.warning.txt"}
                } else {
                    set fluxconv = 1.0 / (beamarea/(pixscale*pixscale)) # assuming Jy/beam
                    print "image_sci_fluxconv.warning.txt" 'Could not understand BUNIT $(fluxunit)! Assuming Jy/beam!\n' {}
                }
            }
            print "image_sci_fluxconv.txt" '%0.15g   %s\n' {fluxconv fluxunit}
        } else {
            print "image_sci_fluxunit.warning.txt" 'No BUNIT keyword was found in the FITS header of image_sci.fits!\n' {}
            set fluxconv = 1.0
            set fluxunit = 'unknown'
            print "image_sci_fluxconv.txt" '%0.1g   %s\n' {fluxconv fluxunit}
            print "image_sci_fluxconv.warning.txt" 'No BUNIT keyword was found in the FITS header of image_sci.fits! Can not determine a valid fluxconv! Set to 1.0!\n' {}
        }
    }


calc_sky_frequency 00
    if(is_file("image_sci_sky_frequency.txt")) {
        #!mv "image_sci_sky_frequency.txt" "image_sci_sky_frequency.txt.backup"
        if(is_vector(sky_frequency)) {unset sky_frequency}
        data "image_sci_sky_frequency.txt" read {sky_frequency 1.f}
        if(!is_vector(sky_frequency)) {!rm "image_sci_sky_frequency.txt"} # added a check here
    }
    if(!is_file("image_sci_sky_frequency.txt")) {
        if(is_vector(sky_frequency)) {unset sky_frequency}
        if(is_file("image_sci.fits")) {
            !gethead "image_sci.fits" "CTYPE3" "CRPIX3" "CRVAL3" > "image_sci_sky_frequency.tmp"
            if(is_vector(sky_frequency)) {unset sky_frequency}
            if(is_vector(sky_freq_type)) {unset sky_freq_type}
            data "image_sci_sky_frequency.tmp" 
            read {sky_freq_type 1.s sky_frequency 3}
            if(is_vector(sky_freq_type) && is_vector(sky_frequency)) {
                if(index(sky_freq_type,'FREQ')==0) {
                    set sky_frequency = sky_frequency/1e9 # GHz
                    define print_noheader 1
                    print "image_sci_sky_frequency.txt" '%15.10f \# GHz\n' {sky_frequency}
                    define print_noheader 0
                }
            }
        }
    }
    if(!is_file("image_sci_sky_frequency.txt")) {
        if(is_vector(sky_frequency)) {unset sky_frequency}
        if(is_file("image_sci.fits")) {
            !gethead "image_sci.fits" "CTYPE4" "CRPIX4" "CRVAL4" > "image_sci_sky_frequency.tmp"
            if(is_vector(sky_frequency)) {unset sky_frequency}
            if(is_vector(sky_freq_type)) {unset sky_freq_type}
            data "image_sci_sky_frequency.tmp" 
            read {sky_freq_type 1.s sky_frequency 3}
            if(is_vector(sky_freq_type) && is_vector(sky_frequency)) {
                if(index(sky_freq_type,'FREQ')==0) {
                    set sky_frequency = sky_frequency/1e9 # GHz
                    define print_noheader 1
                    print "image_sci_sky_frequency.txt" '%15.10f \# GHz\n' {sky_frequency}
                    define print_noheader 0
                }
            }
        }
    }
    if(!is_file("image_sci_sky_frequency.txt")) {
        print 'Error! Could not find sky frequency from the input fits file header!\n' {}
        print "WARNING_NO_SKY_FREQUENCY" 'Error! Could not find sky frequency from the input fits file header!\n' {}
        #exit
    }


calc_phase_center 00
    if(is_file("image_sci_phase_center.txt")) {
        #!mv "image_sci_phase_center.txt" "image_sci_phase_center.txt.backup"
        if(is_vector(phase_center_ra)) {unset phase_center_ra}
        if(is_vector(phase_center_dec)) {unset phase_center_dec}
        if(is_vector(phase_center_x)) {unset phase_center_x}
        if(is_vector(phase_center_y)) {unset phase_center_y}
        data "image_sci_phase_center.txt" read {phase_center_ra 1.f phase_center_dec 2.f phase_center_x 3.f phase_center_y 4.f}
        if(!is_vector(phase_center_ra)||!is_vector(phase_center_dec)||!is_vector(phase_center_x)||!is_vector(phase_center_y)) {!rm "image_sci_phase_center.txt"} # added a check here
    }
    if(!is_file("image_sci_phase_center.txt")) {
        if(is_file("image_sci.fits")) {
            !gethead "image_sci.fits" "CTYPE1" "CRPIX1" "CRVAL1" "CTYPE2" "CRPIX2" "CRVAL2" > "image_sci_phase_center.tmp"
            if(is_vector(phase_center_type1)) {unset phase_center_type1}
            if(is_vector(phase_center_type2)) {unset phase_center_type2}
            if(is_vector(phase_center_ra)) {unset phase_center_ra}
            if(is_vector(phase_center_dec)) {unset phase_center_dec}
            if(is_vector(phase_center_x)) {unset phase_center_x}
            if(is_vector(phase_center_y)) {unset phase_center_y}
            data "image_sci_phase_center.tmp" 
            read {phase_center_type1 1.s phase_center_x 2.f phase_center_ra 3.f phase_center_type2 4.s phase_center_y 5.f phase_center_dec 6.f}
            if(is_vector(phase_center_ra) && is_vector(phase_center_dec)) {
                if(index(phase_center_type1,'RA')==0 && index(phase_center_type2,'DEC')==0) {
                    define print_noheader 1
                    print "image_sci_phase_center.txt" '%15.10f %15.10f %15.3f %15.3f\n' {phase_center_ra phase_center_dec phase_center_x phase_center_y}
                    define print_noheader 0
                }
            }
        }
    }


calc_primary_beam_correction 00
    # 
    read_primary_beam_correction_from_pb_image
    # 
    if(is_file("image_sci_primary_beam_correction.txt")) {
        !mv "image_sci_primary_beam_correction.txt" "image_sci_primary_beam_correction.txt.backup"
    }
    if(is_file("image_sci_primary_beam_correction.warning.txt")) {
        !rm "image_sci_primary_beam_correction.warning.txt"
    }
    if(!is_vector(phase_center_x) || !is_vector(phase_center_y)) {
        if(!is_file("image_sci_phase_center.txt")) {
            calc_phase_center
        }
        if(is_file("image_sci_phase_center.txt")) {
            data "image_sci_phase_center.txt" read {phase_center_ra 1.f phase_center_dec 2.f phase_center_x 3.f phase_center_y 4.f}
        }
    }
    if(!is_vector(sky_frequency)) {
        if(!is_file("image_sci_sky_frequency.txt")) {
            calc_sky_frequency
        }
        if(is_file("image_sci_sky_frequency.txt")) {
            data "image_sci_sky_frequency.txt" read {sky_frequency 1.f}
        }
    }
    if(!is_vector(pixscale)) {
        if(!is_file("image_sci_pixscale.txt")) {
            read_pixscale
        }
        if(is_file("image_sci_pixscale.txt")) {
            data "image_sci_pixscale.txt" read {pixscale 1}
        }
    }
    if(!is_vector(px) || !is_vector(py)) {
        read_data
    }
    if(is_vector(phase_center_x) && is_vector(phase_center_y) && is_vector(px) && is_vector(py) && is_vector(pixscale)) {
        if(is_vector(sky_frequency)) {
            # https://safe.nrao.edu/wiki/bin/view/ALMA/PrimaryBeamArcsec
            # Computes the expected FWHM of a single dish beam by implementing the Baars formula (b*lambda / D), where b is taken either from Equation 18 in ALMA Memo 456 (http://legacy.nrao.edu/alma/memos/html-memos/abstracts/abs456.html):
            # where b = 1.243 - 0.343*10**(-0.05*taper) + 0.12*(10**(-0.05*taper))**2
            # or by Equation 4.13 in Baars (2007) book:
            # where b = 1.269 - 0.566*tau + 0.534*(tau)**2 - 0.208*(tau)**3
            # 
            set primary_beam_disq = ((phase_center_x-px)**2 + (phase_center_y-py)**2) * pixscale**2 # arcsec
            set primary_beam_dist = sqrt(primary_beam_disq) # arcsec
            # 
            set sky_wavelength = 2.99792458e5/sky_frequency # um
            set primary_beam_diam = 12.0 # ALMA 12m
            #set primary_beam_tape = 10.0 # https://safe.nrao.edu/wiki/bin/view/ALMA/AlmaPrimaryBeamCorrection
            #set primary_beam_bpar = 1.243 - 0.343 * primary_beam_tape + 0.12 * primary_beam_tape**2 # http://legacy.nrao.edu/alma/memos/html-memos/alma456/memo456.pdf -- Eq(18)
            set primary_beam_bpar = 1.13
            set primary_beam_fwhm = primary_beam_disq*0.0 + primary_beam_bpar * sky_wavelength / (primary_beam_diam*1e6) / pi * 180.0 * 3600.0 # arcsec
            set primary_beam_sigm = primary_beam_disq*0.0 + primary_beam_fwhm/(2.0*sqrt(2.0*ln(2)))
            set primary_beam_attenuation = exp((-primary_beam_disq)/(2.0*((primary_beam_sigm)**2))) #<TODO><20170613># 
            set primary_beam_correction = 1.0/primary_beam_attenuation
            print "image_sci_primary_beam_correction.txt" '%26g %26g %20g %20g\n' {primary_beam_correction primary_beam_attenuation primary_beam_dist primary_beam_fwhm}
        } else {
            set primary_beam_correction = px*0 + 1
            set primary_beam_attenuation = px*0 + 1
            set primary_beam_dist = px*0 + 0
            set primary_beam_fwhm = px*0 + 0
            print "image_sci_primary_beam_correction.txt" '%26g %26g %20g %20g\n' {primary_beam_correction primary_beam_attenuation primary_beam_dist primary_beam_fwhm}
            print "image_sci_primary_beam_correction.warning.txt" 'Warning! No sky_frequency info!\n' {}
        }
    } 


read_primary_beam_correction_from_pb_image 00
    if(is_file("image_pba_primary_beam_correction.txt")) {
        !mv "image_pba_primary_beam_correction.txt" "image_pba_primary_beam_correction.txt.backup"
    }
    if(is_file("image_pba_primary_beam_correction.warning.txt")) {
        !rm "image_pba_primary_beam_correction.warning.txt"
    }
    if(is_vector(primary_beam_correction)) {unset primary_beam_correction}
    if(is_vector(primary_beam_attenuation)) {unset primary_beam_attenuation}
    if(is_file("image_pba.fits")) {
        if(!is_vector(px) || !is_vector(py)) { read_data }
        define print_noheader 1
        set px_round = int(px+0.5)
        set py_round = int(py+0.5)
        print "image_pba_primary_beam_correction.getpix.input.txt" '%d %d\n' {px_round py_round}
        define print_noheader 0
        !getpix -n 1 "%.15g" "image_pba.fits" @"image_pba_primary_beam_correction.getpix.input.txt" > "image_pba_primary_beam_correction.getpix.output.txt"
        if(is_vector(primary_beam_attenuation_str)) {unset primary_beam_attenuation_str}
        data "image_pba_primary_beam_correction.getpix.output.txt" read {primary_beam_attenuation_str 1.s}
        #<20180109>#if(is_vector(primary_beam_attenuation_str)) {
        #<20180109>#    !rm "image_pba_primary_beam_correction.getpix.input.txt"
        #<20180109>#    !rm "image_pba_primary_beam_correction.getpix.output.txt"
        #<20180109>#}
        set primary_beam_attenuation_str2 = (primary_beam_attenuation_str=='nan') ? '-99' : primary_beam_attenuation_str
        set primary_beam_attenuation = float(primary_beam_attenuation_str2)
        set primary_beam_attenuation = (primary_beam_attenuation==0) ? 1e-99 : primary_beam_attenuation #<20180109>#
        unset primary_beam_attenuation_str2
        set primary_beam_correction = (primary_beam_attenuation_str=='nan') ? -99 : 1.0 / primary_beam_attenuation
        print "image_pba_primary_beam_correction.txt" '%26g %26g\n' {primary_beam_correction primary_beam_attenuation}
        if(sum(primary_beam_correction==1.0)==dimen(primary_beam_correction)) {
            print "image_pba_primary_beam_correction.warning.txt" 'Warning! The PBA image \"image_pba.fits\" is invalid with pixel value 1.0 everywhere!\n' {}
        }
    } else {
        if(!is_vector(px) || !is_vector(py)) { read_data }
        set primary_beam_correction = px*0 + 1.0
        set primary_beam_attenuation = px*0 + 1.0
        print "image_pba_primary_beam_correction.txt" '%26g %26g\n' {primary_beam_correction primary_beam_attenuation}
        print "image_pba_primary_beam_correction.warning.txt" 'Error! No \"image_pba.fits\" was found!\n' {}
    }










go_getpix
    read_data
    read_pixscale
    read_pixnoise
    # 
    set cat_index = float(id) # this is the catalog index from 0 to dimen(catalog)-1, not catalog object id itself
    # 
    #<20170606># added outputing cat_id
    if(is_file("prior_id.txt")) {
        data "prior_id.txt" read {cat_id_full 1.s}
        set cat_id = cat_id_full[cat_index]
    } else {
        set cat_id = cat_index>=0 ? '-99' : '-99'
    }
    # 
    #<20170719># set radius = 1.5
    set radius = 0.00,2.00,0.25
    set pix_rad = px * 0.0 - 99
    set pix_max = px * 0.0 - 99 # max of pixel values
    set pix_sum = px * 0.0 - 99 # sum of pixel values
    set pix_num = px * 0.0 - 99 # number of valid pixels in aperture
    set pix_nan = px * 0.0 - 99 # number of NaN pixels in aperture #<20180222># updated
    set pix_000 = px * 0.0 - 99 # the pixel value at the right source position
    set pix_scl = px * 0.0 + pixscale
    set pix_yes = 0
    do rai=0,dimen(radius)-1 {
        if(radius[$rai]==0.00) {
            set rad = px * 0.0 + 1.0
        } else {
            set rad = px * 0.0 + (radius[$rai] / pixscale)
        }
        set radstr = sprintf('%0.4f',radius[$rai])
        print "getpix.radius."$(radstr)".arcsec.input" '%15.3f %15.3f %15.3f %15.0f %15s\n' {px py rad cat_index cat_id}
        
        !CrabPhotAperPhot -header-in-comment "image_sci_input.fits" "null" "getpix.radius."$(radstr)".arcsec.input" > "getpix.radius."$(radstr)".arcsec.output"
        !sed -i -e 's/[ +-]nan/ -99/g' "getpix.radius."$(radstr)".arcsec.output"
        #!cat "getpix.input"
        #!cat "getpix.output"
        #data "getpix.radius."$(radstr)".arcsec.output" read {pix_num_ 4 pix_sum_ 5 pix_max_ 7} #<20180222># updated
        data "getpix.radius."$(radstr)".arcsec.output" read {pix_num_ 4 pix_sum_ 5 pix_max_ 7 pix_nan_ 21} #<20180222># updated
        
        if(dimen(pix_num_)>0) {
            set pix_coo = (pix_sum_>=pix_sum)
            set pix_rad = (pix_coo) ?     rad  : pix_rad
            set pix_sum = (pix_coo) ? pix_sum_ : pix_sum
            set pix_max = (pix_coo) ? pix_max_ : pix_max
            set pix_num = (pix_coo) ? pix_num_ : pix_num
            set pix_nan = (pix_coo) ? pix_nan_ : pix_nan #<20180222># updated
            set pix_yes = 1
            if(radius[$rai]==0.00) {
                set pix_000 = pix_sum_
            }
        }
    }
    # 
    if(pix_yes==1) {
        # 
        # print results
        #print "getpix.txt" '%15g %15g %15g %15g %15.3f %15.3f %15.3f %15g %15.0f %15s\n' \
        #        {pix_000 pix_max pix_sum pix_num px py pix_rad pix_scl cat_index cat_id} #<20180222># updated
        print "getpix.txt" '%15g %15g %15g %15g %15.3f %15.3f %15.3f %15g %15g %15.0f %15s\n' \
                {pix_000 pix_max pix_sum pix_num px py pix_rad pix_scl pix_nan cat_index cat_id} #<20180222># updated
        # 
        # # 
        # # prepare big array for output
        # set pixel_max = float(_id)*0.0 -99
        # set pixel_sum = float(_id)*0.0 -99
        # set pixel_num = float(_id)*0.0 -99
        # set pixel_x   = float(_id)*0.0 -99
        # set pixel_y   = float(_id)*0.0 -99
        # set pixel_rad = float(_id)*0.0 -99
        # # 
        # # store results into big array
        # set pixel_max[id] = pix_max
        # set pixel_sum[id] = pix_sum
        # set pixel_num[id] = pix_num
        # set pixel_x[id]   = px
        # set pixel_y[id]   = py
        # set pixel_rad[id] = rad
        # set pixel_id      = _id
        # # 
        # # print results
        # print "getpix.txt" '%15g %15g %15g %15.3f %15.3f %15.3f %15.0f\n' {pixel_max pixel_sum pixel_num pixel_x pixel_y pixel_rad pixel_id}
        # #!cat "getpix.txt"
        # 
        # calc primary beam attenuation correction
        calc_sky_frequency
        calc_phase_center
        calc_primary_beam_correction
    }


go_getpix_on_negative_image
    read_data
    read_pixscale
    read_pixnoise
    # 
    set cat_index = float(id) # this is the catalog index from 0 to dimen(catalog)-1, not catalog object id itself
    # 
    #<20170606># added outputing cat_id
    if(is_file("prior_id.txt")) {
        data "prior_id.txt" read {cat_id_full 1.s}
        set cat_id = cat_id_full[cat_index]
    } else {
        set cat_id = cat_index>=0 ? '-99' : '-99'
    }
    # 
    #<20170719># set radius = 1.5
    set radius = 0.00,2.00,0.25
    set pix_rad = px * 0.0 - 99
    set pix_max = px * 0.0 - 99 # max of pixel values
    set pix_sum = px * 0.0 - 99 # sum of pixel values
    set pix_num = px * 0.0 - 99 # number of valid pixels in aperture
    set pix_nan = px * 0.0 - 99 # number of NaN pixels in aperture #<20180222># updated
    set pix_000 = px * 0.0 - 99 # the pixel value at the right source position
    set pix_scl = px * 0.0 + pixscale
    set pix_yes = 0
    do rai=0,dimen(radius)-1 {
        if(radius[$rai]==0.00) {
            set rad = px * 0.0 + 1.0
        } else {
            set rad = px * 0.0 + (radius[$rai] / pixscale)
        }
        set radstr = sprintf('%0.4f',radius[$rai])
        print "getpix_on_negative_image.radius."$(radstr)".arcsec.input" '%15.3f %15.3f %15.3f %15.0f %15s\n' {px py rad cat_index cat_id}
        
        !CrabPhotAperPhot -header-in-comment "image_negative_input.fits" "null" "getpix_on_negative_image.radius."$(radstr)".arcsec.input" > "getpix_on_negative_image.radius."$(radstr)".arcsec.output"
        !sed -i -e 's/[ +-]nan/ -99/g' "getpix_on_negative_image.radius."$(radstr)".arcsec.output"
        #!cat "getpix.input"
        #!cat "getpix.output"
        #data "getpix_on_negative_image.radius."$(radstr)".arcsec.output" read {pix_num_ 4 pix_sum_ 5 pix_max_ 7} #<20180222># updated
        data "getpix_on_negative_image.radius."$(radstr)".arcsec.output" read {pix_num_ 4 pix_sum_ 5 pix_max_ 7 pix_nan_ 21} #<20180222># updated
        
        if(dimen(pix_num_)>0) {
            set pix_coo = (pix_sum_>=pix_sum)
            set pix_rad = (pix_coo) ?     rad  : pix_rad
            set pix_sum = (pix_coo) ? pix_sum_ : pix_sum
            set pix_max = (pix_coo) ? pix_max_ : pix_max
            set pix_num = (pix_coo) ? pix_num_ : pix_num
            set pix_nan = (pix_coo) ? pix_nan_ : pix_nan #<20180222># updated
            set pix_yes = 1
            if(radius[$rai]==0.00) {
                set pix_000 = pix_sum_
            }
        }
    }
    # 
    if(pix_yes==1) { 
        # 
        # print results
        #print "getpix_on_negative_image.txt" '%15g %15g %15g %15g %15.3f %15.3f %15.3f %15g %15.0f %15s\n' \
        #        {pix_000 pix_max pix_sum pix_num px py pix_rad pix_scl cat_index cat_id} #<20180222># updated
        print "getpix_on_negative_image.txt" '%15g %15g %15g %15g %15.3f %15.3f %15.3f %15g %15g %15.0f %15s\n' \
                {pix_000 pix_max pix_sum pix_num px py pix_rad pix_scl pix_nan cat_index cat_id} #<20180222># updated
    }









print_result
    if(!is_file("No_catalog_source_within_image")) {
        read_pixscale
        read_pixnoise
        calc_beamarea
        calc_buffer_size_limit
        calc_fluxconv
        # 
        # <TODO><20170613> fixing bug <TODO>
        calc_primary_beam_correction
        # 
        if(is_file("getpix.result")) {
            !mv "getpix.result" "getpix.result.backup"
        }
        # 
        if(is_file("getpix.txt")) {
            #data "getpix.txt" read {pix_max 2.f pix_sum 3.f pix_num 4.f cat_index 9.f cat_id 10.s} #<20180222># added pix_nan in getpix.txt
            data "getpix.txt" read {pix_max 2.f pix_sum 3.f pix_num 4.f cat_index 10.f cat_id 11.s} #<20180222># added pix_nan in getpix.txt
            # 
            # read pb_corr
            if(!is_file("image_sci_primary_beam_correction.txt")) { calc_primary_beam_correction }
            data "image_sci_primary_beam_correction.txt" read {pb_corr 1.f}
            # 
            # print further results with flux unit Jy/beam (f_peak) or Jy (f_int)
            if(is_vector(pixscale) && is_vector(fluxconv)) {
                if(pixscale>0 && fluxconv>0) {
                    set f_peak = pix_max # do not convert flux unit
                    set f_int = pix_sum * fluxconv # convert flux unit to Jy (integrated over source pixels)
                    set err_peak = pixnoise # do not convert flux unit
                    set err_int = pixnoise * sqrt(pix_num) * fluxconv # convert flux unit to Jy (integrated over source pixels)
                    set err_peak = (f_peak>0) ? err_peak : 1e30 #<20180225># prevent from dividing zero
                    set err_int = (f_int>0) ? err_int : 1e30 #<20180225># prevent from dividing zero
                    set snr_peak = (f_peak>0) ? (f_peak / err_peak) : 0.0
                    set snr_int = (f_int>0) ? (f_int / err_int) : 0.0
                    set rms_noise = f_peak*0.0 + pixnoise
                    print "getpix.result" '%15g %15g %15g %15g %15g %15g %15.0f %15s\n' {f_peak f_int snr_peak snr_int rms_noise pb_corr cat_index cat_id}
                } else {
                    print 'Error! Negative pixscale or fluxconv value! Failed to run \"go_getpix.sm\" subroutine \"print_result\"!\n' {}
                }
            } else {
                print 'Error! Failed to read pixscale and fluxconv! Failed to run \"go_getpix.sm\" subroutine \"print_result\"!\n' {}
            }
        } else {
            print 'Error! \"getpix.txt\" was not found under current directory! Failed to run \"go_getpix.sm\" subroutine \"print_result\"!\n' {}
        }
    }


print_result_on_negative_image
    if(!is_file("No_catalog_source_within_image")) {
        read_pixscale
        read_pixnoise
        calc_beamarea
        calc_buffer_size_limit
        calc_fluxconv
        # 
        if(is_file("getpix_on_negative_image.result")) {
            !mv "getpix_on_negative_image.result" "getpix_on_negative_image.result.backup"
        }
        # 
        if(is_file("getpix_on_negative_image.txt")) {
            #data "getpix_on_negative_image.txt" read {pix_max 2.f pix_sum 3.f pix_num 4.f cat_index 9.f cat_id 10.s} #<20180222># added pix_nan in getpix.txt
            data "getpix_on_negative_image.txt" read {pix_max 2.f pix_sum 3.f pix_num 4.f cat_index 10.f cat_id 11.s} #<20180222># added pix_nan in getpix.txt
            # 
            # read pb_corr
            if(!is_file("image_sci_primary_beam_correction.txt")) { calc_primary_beam_correction }
            data "image_sci_primary_beam_correction.txt" read {pb_corr 1.f}
            # 
            # print further results with flux unit Jy/beam (f_peak) or Jy (f_int)
            if(is_vector(pixscale) && is_vector(fluxconv)) {
                if(pixscale>0 && fluxconv>0) {
                    set f_peak = pix_max # do not convert flux unit
                    set f_int = pix_sum * fluxconv # convert flux unit to Jy (integrated over source pixels)
                    set err_peak = pixnoise # do not convert flux unit
                    set err_int = pixnoise * sqrt(pix_num) * fluxconv # convert flux unit to Jy (integrated over source pixels)
                    set err_peak = (f_peak>0) ? err_peak : 1e30 #<20180225># prevent from dividing zero
                    set err_int = (f_int>0) ? err_int : 1e30 #<20180225># prevent from dividing zero
                    set snr_peak = (f_peak>0) ? (f_peak / err_peak) : 0.0
                    set snr_int = (f_int>0) ? (f_int / err_int) : 0.0
                    set rms_noise = f_peak*0.0 + pixnoise
                    print "getpix_on_negative_image.result" '%15g %15g %15g %15g %15g %15g %15.0f %15s\n' {f_peak f_int snr_peak snr_int rms_noise pb_corr cat_index cat_id}
                } else {
                    print 'Error! Negative pixscale or fluxconv value! Failed to run \"go_getpix.sm\" subroutine \"print_result_on_negative_image\"!\n' {}
                }
            } else {
                print 'Error! Failed to read pixscale and fluxconv! Failed to run \"go_getpix.sm\" subroutine \"print_result_on_negative_image\"!\n' {}
            }
        } else {
            print 'Error! \"getpix_on_negative_image.txt\" was not found under current directory! Failed to run \"go_getpix.sm\" subroutine \"print_result_on_negative_image\"!\n' {}
        }
    }





