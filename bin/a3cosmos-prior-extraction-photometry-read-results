#!/bin/bash
# 


# 
# Check input argument
# 
if [[ $# -lt 2 ]]; then
    echo "Usage: "
    echo "    a3cosmos-prior-extraction-photometry-read-results \"Prior_Extraction_with_Master_Catalog_v20171208\""
    echo "Output: "
    echo "    \"Read_Results_of_Prior_Extraction_with_Master_Catalog_v20171208\""
    echo "Notes: "
    echo "    The directory \"Prior_Extraction_with_Master_Catalog_v20171208\" is an example, it should be the output directory of \"a3cosmos-prior-extraction-photometry\"."
    echo "    You can ignore warning if there is any. "
    echo "Options: "
    echo "    If you input a second argument, we will use it as the output directory."
    exit
fi


# 
# Check Mac System
# 
xargs_command="xargs"
if [[ $(uname) == "Darwin" ]]; then
    if [[ $(type gxargs 2>/dev/null | wc -l) -eq 1 ]]; then
        xargs_command="gxargs"
    else
        echo "Error! Please install GNU findutils under Mac system! (e.g. sudo port install findutils)"
        exit 1
    fi
fi


# 
# Set Input dir
# 
InputDir="$1"


# 
# Check input dir
# 
if [[ ! -d "$InputDir" ]]; then
    echo "Error! The input directory \"$InputDir\" does not exist! Abort!"; exit 1
else
    InputDir=$(perl -MCwd -e 'print Cwd::abs_path shift' "$InputDir") # get full path
    echo "Input directory \"$InputDir\""
fi


# 
# Set Output dir
# 
if [[ $# -ge 2 ]]; then
    OutputDir="$2"
    echo "Setting output directory as \"$OutputDir\""
else
    OutputDir="Read_Results_of_"$(basename "$InputDir")
    echo "Using default output directory \"$OutputDir\""
fi


# 
# Check output dir
# 
if [[ ! -d "$OutputDir" ]]; then
    mkdir -p "$OutputDir"
fi


# 
# Read Sci Images
# 
Old_IFS=$IFS
IFS=$'\n' SciImages=($(<"$InputDir/List_of_Input_Sci_Images.txt"))
IFS=$'\n' PsfImages=($(<"$InputDir/List_of_Input_Psf_Images.txt"))
IFS="$Old_IFS"
if [[ ${#SciImages[@]} -eq 0 || ${#PsfImages[@]} -eq 0 ]]; then
    echo "Error! Failed to read \"$InputDir/List_of_Input_Sci_Images.txt\" and \"$InputDir/List_of_Input_Psf_Images.txt\"!"
    exit 1
fi


# 
# Change dir to OutputDir
# 
cd "$OutputDir"


# 
# List of files to read and merge
# 
List_of_Files=(\
"getpix.mask" \
"getpix.txt" \
"getpix.result" \
"getpix_on_negative_image.mask" \
"getpix_on_negative_image.txt" \
"getpix_on_negative_image.result" \
"fit_2.result.all.txt"
"fit_2.result.flux_origin.txt"
"fit_2.result.source_area.txt"
"fit_2.result.source_peak.txt"
"fit_2.result.source_err.txt"
"fit_3.result.all.txt"
"fit_3.result.flux_origin.txt"
"fit_3.result.source_area.txt"
"fit_3.result.source_peak.txt"
"fit_3.result.source_err.txt"
"fit_n2.result.all.txt"
"fit_n2.result.flux_origin.txt"
"fit_n2.result.source_area.txt"
"fit_n2.result.source_peak.txt"
"fit_n2.result.source_err.txt"
"fit_n3.result.all.txt"
"fit_n3.result.flux_origin.txt"
"fit_n3.result.source_area.txt"
"fit_n3.result.source_peak.txt"
"fit_n3.result.source_err.txt"
)
#"final.result" \
#"final_on_negative_image.result" \


# 
# Backup previous ouput file
# 
for OutputItem in "${List_of_Files[@]}"; do
    if [[ -f "Read_Results_all_final_${OutputItem}.backup" ]]; then
        mv "Read_Results_all_final_${OutputItem}.backup" "Read_Results_all_final_${OutputItem}.backup.backup"
    fi
    if [[ -f "Read_Results_all_final_${OutputItem}" ]]; then
        mv "Read_Results_all_final_${OutputItem}" "Read_Results_all_final_${OutputItem}.backup"
    fi
done


# 
# Loop and read the results of "getpix"
# 
for (( i=0; i<${#SciImages[@]}; i++ )); do
    # 
    SciImage="${SciImages[i]}"
    PsfImage="${PsfImages[i]}"
    SourceName=$(basename "$SciImage" | sed -e 's%\.fits%%g')   #<TODO># file name
    
    # print
    #echo ""
    #echo ""
    echo "************"
    echo "SourceName = $SourceName   ($(($i+1))/${#SciImages[@]})   ($(date +'%Y%m%d %Hh%Mm%Ss %Z'))"
    #echo "SciImage = \"$SciImage\""
    #echo "PsfImage = \"$PsfImage\""
    #echo "InputDir = \"$(readlink -f $InputDir)/astrodepth_prior_extraction_photometry/$SourceName\""
    #echo "***********"
    
    CurrentDir=$(pwd)
    
    cd "$InputDir/astrodepth_prior_extraction_photometry/$SourceName/"
    
    for OutputItem in "${List_of_Files[@]}"; do
        if [[ -f "${OutputItem}" ]]; then
            if [[ ! -f "$CurrentDir/Read_Results_all_final_${OutputItem}" ]]; then
                head -n 1 "${OutputItem}" | $xargs_command -d '\n' -I % echo "%    image_file" > "$CurrentDir/Read_Results_all_final_${OutputItem}"
            fi
            cat "${OutputItem}" | tail -n +3 | $xargs_command -d '\n' -I % echo "%    $SourceName" >> "$CurrentDir/Read_Results_all_final_${OutputItem}"
        else
            echo "********************************************************"
            echo "Warning! \"$(pwd)/${OutputItem}\" was not found!"
            echo "********************************************************"
            date +"%Y-%m-%d %H:%M:%S %Z"                            >> "WARNING.TXT"
            echo "Warning! \"$(pwd)/${OutputItem}\" was not found!" >> "WARNING.TXT"
        fi
    done
    
    cd "$CurrentDir"
    #break
done


# 
# cp caap_prior_extraction_photometry_read_results.sm
# 
cp "$InputDir/astrodepth_prior_extraction_photometry/astrodepth_catalog_0_id_mask.txt" .
cp "$InputDir/astrodepth_prior_extraction_photometry/astrodepth_catalog_0_ra_dec.txt" .



# 
# count lines
# 
echo "Counting lines: "
for OutputItem in "${List_of_Files[@]}"; do
    if [[ -f "Read_Results_all_final_${OutputItem}" ]]; then
        CountedLines=$(cat "Read_Results_all_final_${OutputItem}" | wc -l)
        printf "%-120s $CountedLines" "Read_Results_all_final_${OutputItem}"
    fi
    echo ""
done



# 
# Print final message
# 
echo "************"
echo "Output to \"$OutputDir\"!"
#echo "Please then run \"macro read caap_prior_extraction_photometry_read_results.sm read_results\" in Supermongo!"
#echo "Great! Finally! All done!"


