#!/bin/bash
# 

# 
# Check inputs
if [[ $# -lt 2 ]]; then
    echo "Usage: almacosmos_convert_ascii_table_to_ds9_region_file ascii_table output_file"
    exit
fi

# 
# Prepare id ra dec columns
inputfile=""
outputfile=""
ctcolid=1
ctcolra=2
ctcolde=3
ctcolmaj=0
ctcolmin=0
ctcolpa=0
ctcolnote=0  # note -- added 20160123 -- append to source ID
ctcolor="green"
ctccrad=0.7 # default source size radius 0.7 arcsec
ctpoint=0 # symbol shape is point-like
ctctype="fk5"
ctsky2xy="" # a fits file for sky2xy/xy2sky conversion, if given.
ctxy2sky="" # a fits file for sky2xy/xy2sky conversion, if given.

# 
# Read user inputs
i=1
while [[ $i -le $# ]]; do
    tempstr=$(echo "${!i}" | tr '[:upper:]' '[:lower:]' | sed -e 's%^--%-%g')
    if [[ "$tempstr" == "-id" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctcolid="${!i}"
        fi
    elif [[ "$tempstr" == "-ra" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctcolra="${!i}"
        fi
    elif [[ "$tempstr" == "-de" ]] || [[ "$tempstr" == "-dec" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctcolde="${!i}"
        fi
    elif [[ "$tempstr" == "-note" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctcolnote="${!i}"
        fi
    elif [[ "$tempstr" == "-color" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctcolor="${!i}"
        fi
    elif [[ "$tempstr" == "-radius" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctccrad="${!i}"
        fi
    elif [[ "$tempstr" == "-maj" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctcolmaj="${!i}"
        fi
    elif [[ "$tempstr" == "-min" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctcolmin="${!i}"
        fi
    elif [[ "$tempstr" == "-pa" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctcolpa="${!i}"
        fi
    elif [[ "$tempstr" == "-sky2xy" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctsky2xy="${!i}"
            if [[ $(sky2xy 2>&1 | wc -l) -eq 1 ]]; then echo "Error! wcstools sky2xy not found!"; exit; fi # check wcstools
            if [[ ! -f "$ctsky2xy" ]]; then echo "Error! Fits image \"$ctsky2xy\" was not found!"; exit; fi # check fits file
        fi
    elif [[ "$tempstr" == "-xy2sky" ]]; then
        i=$((i+1))
        if [[ $i -le $# ]]; then
            ctxy2sky="${!i}"
            if [[ $(xy2sky 2>&1 | wc -l) -eq 1 ]]; then echo "Error! wcstools xy2sky not found!"; exit; fi # check wcstools
            if [[ ! -f "$ctxy2sky" ]]; then echo "Error! Fits image \"$ctxy2sky\" was not found!"; exit; fi # check fits file
        fi
    elif [[ "$tempstr" == "-image" ]]; then
        ctctype="image"
    else
        if [[ -z "$inputfile" ]]; then
            inputfile="${!i}"
        elif [[ -z "$outputfile" ]]; then
            outputfile="${!i}"
        fi
    fi
    i=$((i+1))
done
# print
echo "Using column $ctcolid as ID"
echo "Using column $ctcolra as RA"
echo "Using column $ctcolde as Dec"
if [[ $ctcolnote -gt 0 ]]; then
echo "Using column $ctcolnote as Note"
fi

# delimeters
# TODO


# 
# write header
if [[ x"$outputfile" != x ]]; then
    echo "# Region file format: DS9 version 4.1" > "$outputfile"
    echo "global color=$ctcolor dashlist=8 3 width=1 font=\"helvetica 8 normal roman\" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1" >> "$outputfile"
    echo "$ctctype"
    echo "$ctctype" >> "$outputfile"
else
    echo "Error! Output file not given!"
    exit 1
fi
# 
cat "$inputfile" | while read -r line; do
    if [[ x"$line" != x ]]; then
        if [[ $(echo "$line" | grep -v -E "^[\|#]" | wc -l) -eq 1 ]]; then
            trimline=("" $(echo $line | sed -e 's/^ *//g' | tr -s ' ')) # prepend an element, so that column number can directly serve as index (because index starts from 0 while column number starts from 1).
            # convert sky2xy
            if [[ x"$ctsky2xy" != x ]]; then 
              ctsky2xy_converted=$(sky2xy -n 6 "$ctsky2xy" ${trimline[$ctcolra]} ${trimline[$ctcolde]})
              trimline[$ctcolra]=$(echo $ctsky2xy_converted | tr -s ' ' | cut -d ' ' -f 5) # x
              trimline[$ctcolde]=$(echo $ctsky2xy_converted | tr -s ' ' | cut -d ' ' -f 6) # y
            fi
            if [[ x"$ctxy2sky" != x ]]; then 
              ctxy2sky_converted=$(xy2sky -d -n 10 "$ctxy2sky" ${trimline[$ctcolra]} ${trimline[$ctcolde]})
              trimline[$ctcolra]=$(echo $ctxy2sky_converted | tr -s ' ' | cut -d ' ' -f 1) # ra
              trimline[$ctcolde]=$(echo $ctxy2sky_converted | tr -s ' ' | cut -d ' ' -f 2) # dec
            fi
            if [[ $ctcolnote -gt 0 ]]; then
                trimline[$ctcolid]="${trimline[$ctcolid]},${trimline[$ctcolnote]}"
            fi
            # 
            # determine if source maj, min, PA are given or not
            doellipse=0
            if [[ $ctcolmaj -gt 0 ]]; then
                if [[ $(awk "BEGIN {if(${trimline[$ctcolmaj]}>0) print 1; else print 0;}") -eq 1 ]]; then
                    ctccrad="${trimline[ctcolmaj]}"
                    if [[ $ctcolmin -gt 0 ]]; then
                        if [[ $(awk "BEGIN {if(${trimline[$ctcolmin]}>0) print 1; else print 0;}") -eq 1 ]]; then
                            doellipse=1 # do ellipse only when source maj and min are given. It is still ok if PA is not given.
                            if [[ $ctcolpa -le 0 ]]; then
                                trimline[$ctcolpa]=0
                            fi
                        fi
                    fi
                fi
            fi
            # 
            if [[ $ctpoint -eq 1 ]]; then
                echo "point(${trimline[$ctcolra]},${trimline[$ctcolde]}) # point=boxcircle $(bc <<< $ctccrad/1) text={${trimline[$ctcolid]}}" >> "$outputfile"
                echo "point(${trimline[$ctcolra]},${trimline[$ctcolde]}) # point=boxcircle $(bc <<< $ctccrad/1) text={${trimline[$ctcolid]}}"
            elif [[ $doellipse -gt 0 ]]; then
                echo "ellipse(${trimline[$ctcolra]},${trimline[$ctcolde]},${trimline[$ctcolmaj]}\",${trimline[$ctcolmin]}\",${trimline[$ctcolpa]}) # text={${trimline[$ctcolid]}} width=2" >> "$outputfile"
                echo "ellipse(${trimline[$ctcolra]},${trimline[$ctcolde]},${trimline[$ctcolmaj]}\",${trimline[$ctcolmin]}\",${trimline[$ctcolpa]}) # text={${trimline[$ctcolid]}} width=2"
            else
                echo "circle(${trimline[$ctcolra]},${trimline[$ctcolde]},$ctccrad\") # text={${trimline[$ctcolid]}} width=1" >> "$outputfile"
                echo "circle(${trimline[$ctcolra]},${trimline[$ctcolde]},$ctccrad\") # text={${trimline[$ctcolid]}} width=1"
            fi
        fi
    fi
done




